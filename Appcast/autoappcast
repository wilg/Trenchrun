#!/usr/bin/env ruby

# Dependencies
require "rubygems"
require "aws-sdk"
require 'cfpropertylist'
require 'yaml'
require 'fileutils'
require 'pathname'
require 'tmpdir'
require 'grit'
require 'open-uri'

CURRENT_DIR =  File.expand_path File.dirname(__FILE__)
SETTINGS = YAML.load_file "#{CURRENT_DIR}/autoappcast_config.yml"

class AutoAppcast

  # Setup shit

  def release!
        
    puts "Publishing #{SETTINGS["app_name"]} release #{version_number}."
    puts "Compressing app..."
    AutoAppcast.zip_folder(SETTINGS["built_app_path"], temporary_zipped_version_path)
    puts "Uploading application..."
    upload_public_file_to_s3(temporary_zipped_version_path, zipped_filename)
    
    puts "Writing appcast..."
    File.open(temporary_appcast_path, 'w') {|f| f.write(appcast_data) }
    upload_public_file_to_s3(temporary_appcast_path, "appcast.xml")
    
    puts "Writing release notes..."
    File.open(temporary_release_notes_path, 'w') {|f| f.write(release_notes_data) }
    upload_public_file_to_s3(temporary_release_notes_path, "release_notes.html")
    
    puts "Writing head id..."
    File.open(temporary_head_path, 'w') {|f| f.write(current_head_id) }
    upload_public_file_to_s3(temporary_head_path, "head_id.txt")
    
    puts "Released!"
    
  end
  
  def appcast_data
    file = File.open("#{CURRENT_DIR}/appcast.template.xml", "rb")
    contents = file.read
    contents.sub!("$DESCRIPTION", "Updated to version #{version_number}, #{Time.now.to_s}")
    contents.sub!("$VERSION", version_number)
    contents.sub!("$URL", s3_url(zipped_filename))
    contents
  end
  
  def release_notes_data
    repo = Grit::Repo.new(Pathname.new(CURRENT_DIR).parent)
    commits = repo.commits_between(last_commit, repo.commits.first.id)
    
    file = File.open("#{CURRENT_DIR}/release_notes.template.html", "rb")
    contents = file.read
    
    contents.gsub!("$APPNAME", SETTINGS["app_name"])
    contents.sub!("$VERSION", human_version)
    contents.sub!("$DATE", Time.now.strftime("%b %d %y, %I:%M%p"))
    
    lis = ""
    for commit in commits
      lis << "<li>#{commit.message}</li>"
    end
    
    if lis.length < 1
      lis <<"<li><em>Unknown changes.</em></li>"
    end
    
    contents.sub!("$RELEASELIS", lis)
    
    lis = ""
    for commit in repo.commits('master', false)
      lis << "<li>#{commit.message}</li>"
    end
    contents.sub!("$PREV_CHANGES", lis)
    
    contents
  end
  
  def current_head_id
    repo = Grit::Repo.new(Pathname.new(CURRENT_DIR).parent)
    repo.commits.first.id
  end
  
  def human_version
    "build #{version_number}"
  end
  
  def last_commit
    file = open("#{SETTINGS["base_url"]}/head_id.txt")
    contents = file.read
    contents
  end
  
  def upload_public_file_to_s3(file, s3_path)
    s3 = AWS::S3.new( :access_key_id => SETTINGS["s3_access_key_id"], :secret_access_key => SETTINGS["s3_secret_access_key"])
    file_thing = s3.buckets[SETTINGS["s3_bucket"]].objects[s3_path]
    file_thing.write(File.read(file))
    file_thing.acl = :public_read
  end
  
  def s3_url(s3_path)
    s3 = AWS::S3.new( :access_key_id => SETTINGS["s3_access_key_id"], :secret_access_key => SETTINGS["s3_secret_access_key"])
    file_thing = s3.buckets[SETTINGS["s3_bucket"]].objects[s3_path]
    file_thing.public_url(secure: true).to_s
  end
  
  def tempdir
    Dir.tmpdir
  end
  
  def temporary_zipped_version_path
    "#{tempdir}/#{zipped_filename}"
  end
  
  def temporary_appcast_path
    "#{tempdir}/appcast.xml"
  end
  
  def temporary_release_notes_path
    "#{tempdir}/release_notes.html"
  end
  
  def temporary_head_path
    "#{tempdir}/head_id.txt"
  end
  
  def zipped_filename
    "#{SETTINGS["app_name"]}_#{version_number}.zip".downcase
  end
  
  def version_number
    plist = CFPropertyList::List.new(:file => "#{SETTINGS["built_app_path"]}/Contents/Info.plist")
    data = CFPropertyList.native_types(plist.value)
    data["CFBundleVersion"]
  end

  def self.zip_folder(folder_in, zip_name)
    `cd #{folder_in};cd ..;zip -r "#{folder_in}.zip" "#{Pathname.new(folder_in).basename}"`
    FileUtils.mv("#{folder_in}.zip", "#{zip_name}")
  end
  
end

AutoAppcast.new.release!
